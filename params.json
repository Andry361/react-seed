{"name":"React-seed","tagline":"Seed project for React apps using ES6 & webpack","body":"# React seed [![Build Status](https://travis-ci.org/badsyntax/react-seed.svg?branch=master)](https://travis-ci.org/badsyntax/react-seed)\r\n\r\nA boilerplate for building React apps with ES6 and webpack.\r\n\r\n## What you get\r\n\r\n* React 0.13\r\n* Compilation of ES6, ES7 & JSX to ES5 via babel\r\n* webpack with react hot loader (also html, css, sass and other useful loaders)\r\n* Karma, mocha, chai & sinon for testing\r\n* Basic flux architecture with app actions, stores and example web API usage\r\n* React router ([feature/react-router](https://github.com/badsyntax/react-seed/tree/feature/react-router))\r\n* Material UI ([feature/material-ui](https://github.com/badsyntax/react-seed/tree/feature/material-ui))\r\n\r\n## Getting started\r\n\r\n### Installing with git\r\n\r\n```bash\r\ngit clone --depth=1 https://github.com/badsyntax/react-seed.git my-project\r\n```\r\n\r\n### Installing with yeoman\r\n\r\n1. `npm install -g yo`\r\n2. `npm install -g generator-react-seed`\r\n3. Use the generator like so: `yo react-seed`\r\n\r\n## npm scripts\r\n\r\n* `npm start` - Build and start the app in dev mode at http://localhost:8000\r\n* `npm test` - Run the tests\r\n* `npm run build` - Run a production build\r\n\r\n## Examples\r\n\r\n###Â Writing components:\r\n\r\n```js\r\n// Filename: Menu.jsx\r\n\r\n'use strict';\r\n\r\nimport './_Menu.scss';\r\nimport React from 'react';\r\nimport MenuItem from './MenuItem';\r\n\r\nlet { Component, PropTypes } = React;\r\n\r\nexport default class Menu extends Component {\r\n\r\n  static defaultProps = {\r\n    items: []\r\n  };\r\n\r\n  static propTypes = {\r\n    items: PropTypes.array.isRequired\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ul className={'menu'}>\r\n        {this.props.items.map((item) => {\r\n          return (<MenuItem item={item} />);\r\n        }, this)}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n###Writing tests:\r\n\r\n```js\r\n// Filename: __tests__/Menu-test.jsx\r\n\r\n'use strict';\r\n\r\nimport React from 'react/addons';\r\nimport { expect } from 'chai';\r\n\r\nimport Menu from '../Menu.jsx';\r\nimport MenuItem from '../MenuItem.jsx';\r\n\r\n// Here we create a mocked MenuItem component.\r\nclass MockedMenuItem extends MenuItem {\r\n  render() {\r\n    return (\r\n      <li className={'mocked-menu-item'}>{this.props.item.label}</li>\r\n    );\r\n  }\r\n}\r\n\r\n// Here we set the mocked MenuItem component.\r\nMenu.__Rewire__('MenuItem', MockedMenuItem);\r\n\r\ndescribe('Menu', () => {\r\n\r\n  let { TestUtils } = React.addons;\r\n\r\n  let menuItems = [\r\n    { id: 1, label: 'Option 1' },\r\n    { id: 2, label: 'Option 2' }\r\n  ];\r\n\r\n  let menu = TestUtils.renderIntoDocument(\r\n    <Menu items={menuItems} />\r\n  );\r\n  let menuElem = React.findDOMNode(menu);\r\n  let items = menuElem.querySelectorAll('li');\r\n\r\n  it('Should render the menu items', () => {\r\n    expect(items.length).to.equal(2);\r\n  });\r\n\r\n  it('Should render the menu item labels', () => {\r\n    Array.prototype.forEach.call(items, (item, i) => {\r\n      expect(item.textContent.trim()).to.equal(menuItems[i].label);\r\n    });\r\n  })\r\n\r\n  it('Should render the mocked menu item', () => {\r\n    expect(menuElem.querySelectorAll('li')[0].className).to.equal('mocked-menu-item');\r\n  });\r\n});\r\n\r\n```\r\n\r\n## Sass, CSS & webpack\r\n\r\n`import` Sass and CSS files from within your JavaScript component files:\r\n\r\n```js\r\n// Filename: app.jsx\r\nimport 'normalize.css/normalize.css';\r\nimport './scss/app.scss';\r\n```\r\n\r\n* **Important note:** If you're importing component Sass files within your JavaScript component files, then each sass file will be compiled as part of a different process, and thus you cannot share global references. See [this issue](https://github.com/jtangelder/sass-loader/issues/105) for more information.\r\n* Sass include paths can be adjusted in the `webpack/loaders.js` file.\r\n* All CSS (compiled or otherwise) is run through Autoprefixer.\r\n* CSS files are combined in the order in which they are imported in JavaScript, thus\r\nyou should always import your CSS/Sass before importing any other JavaScript files.\r\n* Use an approach like [BEM](http://cssguidelin.es/#bem-like-naming) to avoid specificity\r\nissues that might exist due to unpredicatable order of CSS rules.\r\n\r\n## HTML files\r\n\r\nAll required `.html` files are compiled with lodash.template and synced into the `./build` directory:\r\n\r\n```js\r\n// Filename: app.jsx\r\nimport './index.html';\r\n```\r\n\r\n* You can adjust the lodash template data in the `webpack/loaders.js` file.\r\n\r\n## Conventions\r\n\r\n* Use fat arrows for anonymous functions\r\n* Don't use `var`. Use `let` and `const`.\r\n\r\n\r\n## Releasing\r\n\r\n1. `npm version patch`\r\n2. `git push && git push --tags`\r\n3. `npm login` (Optional)\r\n4. `npm publish`\r\n\r\n## Credits\r\n\r\nThis project was initially forked from https://github.com/tcoopman/react-es6-browserify\r\n\r\n## License\r\n\r\nCopyright (c) 2015 Richard Willis\r\n\r\nMIT (http://opensource.org/licenses/MIT)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}